LAMBDA EXPRESSION : is a new feature introduced with Java8 and what it does 
is provide us with an easier way to work with interfaces that have only got 
one method. They are typical and often used in places where we use anonymous
 classes.
 
 Every LAMBDA-EXPRESSION has 3 parts:
 
 1 - Arguments List
 2 - Narrow Token
 3 - The Body
 
 NOTE : because the compiler needs to match the lambda expression to a method,
 LAMBDA-EXPRESSIONS can only be used with interfaces that contain one method
 that has to be implemented. This interfaces are also refered to as 
 FUNCTIONAL INTERFACES.
 
 By using a LAMBDA EXPRESSION instead of creating a class that implements
 RUNNABLE, or instead of using an ANONYMOUS-CLASS we're able to reduce the
 lines of code that we have to write and we could focus on the important code.
 
 What if the run() method we implement contains multiple lines? This is not a 
 problem, all we have to do is surround the lambda's body with curly braces.
 
 NOTE: We said that we can only use LAMBDA-EXPRESSIONS for interfaces that
 require the implementation of only one method but the COMPARATOR documentation
 states the the COMPARATOR interface is a FUNCTIONAL interface. Actually it
 quotes: "this is a functional interface and can therefore be used as the 
 assignment target for a lambda expression or method reference". 
 
 In this case (the COMPARATOR INTERFACE) we can use the LAMBDA even if there are 
 two methods that do not have default implementation - compare() and equals() -,
 because the equals() method will always have a default implementation. Given 
 that all classes descend from Object and Object contains an equal method,
 that means that every instance of that implements COMPARATOR will already 
 have an implementation of the equals method. Therefore the COMPARATOR Interface
 really in reality only has a single method that always has to be implement
 by the classes that implement that interface, hence COMPARATOR is a 
 FUNCTIONAL INTERFACE and we can use LAMBDA-EXPRESSIONS instead of 
 an ANONYNOUS-CLASS.    
 
In the update of the example, instead of an Anonymous class we 
will pass LAMDA-EXPRESSION, producing the same result.

One nice thing about LAMDBDA-EXPRESSIONS is that is quite easy to spot the 
code that is going to be run, especially when only one line of code is to be used.

NOTE : in the parameters part of the LAMBDA-EXPRESSION, we can pass the type of the parameter, 
or not. In the second case the compiler will infer the type of the object. 

NOTE : when we only have one parameter in the LAMBDA we don't need to put that 
parameter between parentheses. We only are forced to put parentheses when there 
are more than 1 parameter or when there's no parameters.

NOTE: we can't avoid having to define an interface when using LAMBDAs, 
but still out work is more simplified and concise.

What happens with interfaces with a single method that return a value? Well, 
when the LAMBDA body consists of a single statement that evaluates to a value, 
the return keyword is assumed and the returned value is inferred to be type of 
the evaluated value (which in our sample is String).

We can assign LAMBDA to variables and use them later, and in more than one place. 

======= Lecture 198 : LAMBDA-EXPRESSIONs nested blocks  ========

If our lamda contain more than one statement we'll have to use the "return" 
keyword and we put the code between curly braces {...}. 

NOTE : once we have the curly braces the return keyword is mandatory even 
if we only have one line of code.

NOTE : the LAMBDA isn't a class, so when the code in the LAMDA runs and an 
anonymous instance isn't created the LAMBDA is treated as a nest block of 
code of its current class, and it has the same scope as a nested block. 

Code within a nested block can reference variables defines within the 
enclosing block, which in our example is the doSomething() method's body. 
What about ANONYMOUS classes? Well for anonymous classes, if we want to 
use a local variable defined outside of it we have to declare it as "final". 
In our example if we try to use "i" inside the anonymous class 
("i" is not final) we'll get a compile error.

But, why do local variables have to be declared as FINAL when used 
within ANONOYMOUS classes? Because the local variable doesn't belong 
to the anonymous class instance, what actually happens under the 
covers is that the variable is replaced by whatever the value 
of "i" is when the instance is constructed. So is possible we 
may not use the instance of an anonymous class for a while, 
we may even pass it to a method in another class and there'd be no way 
for the java runtime to update the value within the anonymous class instance 
every time it changed within the doSomething() method. That is to say, 
the value will get out of sync. For that reason the values of local variables 
declared outside the scope of the anonymous class are not allowed to change, 
they have to be declared as FINAL. 


============= Lecture 199 : Scope and and Functional Programming ============

Local variables when used in lambda expressions must be "effectively final", 
this meaning that they should either be declared final, or their value should
not change.

But what about variables that we declare inside lambda expression? We can change 
variable declared inside the lambda, because those variables are within the 
lambda scope, so can't be change outside the lambda. Also they won't go away
because the execution the enclosing scope has completed.

This behavior is also enhanced in loops, as each object variable in the loop,
e.g every instance of employee, is effectively final, given that a local 
variable is created for each iteration of the loop and that means that the variable
is "effectively final for each iteration". But if we move their declaration 
to outside the loop they will no longer be effectively final.

Along with lambda expressions, in Java 8 were introduced a number of functionalities 
to work with them, like working for iterables.

For some developers lambdas are nothing more than a syntactic sugar, that allows more
convenient and concise way of writing anonymous classes and that in reality they don't
add anything new to the language. Other developers argue that lambdas are Java's first
step into functional programming which is a programming paradigm that focuses on
computing and returning results. 

==== Lecture 200 & 201 : Functional Interfaces, Predicates and Suppliers ==============

We're going to take a look into the package java.util.function which was added in Java8.

Predicates: to their test() method is passed an object as which will be passed as
parameter to the lambda expressions that maps to the predicate. Predicates, as we can 
see in the example are lambda expressions. 

Predicates are quite powerful, because we can pass all sorts of conditions to the method,
and we don't have to write a different if condition to filter the employees based on
different age criteria. Instead all we need is a different lambda expression that can 
map to the Predicate interface. 

We can also pass an anonymous predicate to the method, which reinforces the point that
lambda expressions are not the unique way. If we don't want or we can't use lambda
there's always anonymous class. 

NOTE : the Consumer and the Predicate interface are general interfaces, they don't care
about the type of parameter being passed to the lambda expression, they're using generic
to infer the type. Now, there are other Consumer and Predicate interfaces that expects 
a specific type of parameter, for example the Double Consumer, expects a lambda expression
that has a double argument. There's also an IntConsumer and a LongConsumer. Same for 
Predicates, i.e, DoublePredicate, IntPredicate and LongPredicate. Where possible 
we probably should use the more specific type of lambda to improve readability. And we
can use in those any mathematical expression that returns the specified data type.

We can also "chain" (connect) Predicates together, e.g, let's assume that we want to test
whether a number is greater than 15 and less that 100. We could update our existing predicate
to contain both conditions, but let's assume that for some reason we don't want or we can't
do that. So what we'll do is create a second Predicate and chain it to the first one. It will
return true if both Predicates are true, and false if at least one of the two is false.

The Predicate interface also contains or(), negate() and isEquals() methods. The more specific
predicate interfaces contain or() and negate() but they don't contain isEquals() and they
don't extend Predicate. The and(), or() and negate() methods can be chained together.
This chaining is useful if there's a situation where we need to build a condition on the fly 
or when we want to reuse some Predicates in different areas of an application. 

Supplier interface=================================

Supplier, doesn't accept any arguments and it does return a value. Because of that Supplier 
always return a value we have to include the expected return type when we declare it. And just 
as with other lambda expressions we can pass suppliers to methods. 


==== Lecture 202 : Functions =============

NOTE : the Consumer interface doesn't return a value, Supplier doesn't accept any parameter,
while Predicates only return true or false.

Function interface : the interface represents a function that takes one parameter and returns
a value, the functional method (the one that use with the lambdas) is the apply() method. The 
advantage of using the Function interface is that we can pass code that accepts and returns a value
to a method in the form of a lambda expression and the run that code without having to create an
interface and a class that implements the interface. 


==== Lecture 203 : Chaining functions ===============

Just as for Consumer, Supplier and Predicate interfaces, in the Function interface there are 
more specific function interfaces that include the type of the argument and return value. For 
example the LonToIntFunction accepts a long and returns an int. 

We can also chain functions together same as for Predicates, using in this case the 
andThen() method, which takes a function as a parameter. 

Chaining functions requires these steps:

We have to create what's called a composed function, the function that calls the andThen()
method will run first, and the the function passes the argument to andThen will operate on its
results.  

What do we do if we need more than 2 arguments in a lambda expression? We'll we can 
write lambda expressions that takes as many arguments as we want, but we can't the 
use those that take more than two with any of the interfaces in the java.util.function
package. This may only be a problem when we want to use an API that perhaps takes one
of the interfaces as a parameter, so in that case we probably want to message our code,
so that we can use a lambda that matches the required interface. 

  

   
  








